:ruby
  action_is_edit = @event.persisted?
  user_is_admin = current_user&.is_admin?
  display_details = user_is_admin || action_is_edit
  display_registration = user_is_admin || @program.cfp&.enable_registrations?

%h4 Proposal Information
%hr

.form-group
  = f.label :title
  %abbr{title: 'This field is required'} *
  = f.text_field :title, autofocus: true, required: true, class: 'form-control'

.form-group
  = f.label :subtitle
  = f.text_field :subtitle, class: 'form-control'
.form-group
  = f.label :presentation_mode
  = f.select :presentation_mode, options_for_select(Event.display_presentation_modes, @event.presentation_mode), { include_blank: true }, { class: 'select-help-toggle form-control' }

.form-group
  = f.label :speaker_ids, 'Speakers'
  = f.select :speaker_ids, user_options_for_dropdown(@event, :speakers), {}, { multiple: true, class: "select-help-toggle js-userSelector form-control", placeholder: "Select speakers..." }
  .help-block The people responsible for the event. You can only select existing users.

= committee_only_actions(current_user, @conference) do
  .form-group
    = f.label :volunteer_ids, 'Volunteers'
    = f.select :volunteer_ids, user_options_for_dropdown(@event, :volunteers), {}, { multiple: true, class: "select-help-toggle js-userSelector form-control", placeholder: "Select volunteers..." }
    .help-block Assign volunteers to help run this session.
  .form-group
    = f.label "Is this is parent event?", for: :superevent
    = f.check_box :superevent, class: 'switch-checkbox'
    .help-block
      A parent event can contain subevents. Enable this for the primary lightning talk
      session, poster sessions, etc.
  .form-group
    = f.label :parent_id, 'Selet a Parent Event'
    = f.select :parent_id, @superevents.map { |e| [e.title, e.id] }, {include_blank: 'Select a Parent Event'}, {class: 'select-help-toggle form-control'}
    .help-block
      Designate a parent event so that this event appears scheduled "inside"
      the parent event on the schedule.
  .form-group
    = f.label :committee_review, 'Committee Feedback'
    = f.text_area :committee_review, rows: 5, data: { provide: 'markdown' }
    .help-block= markdown_hint('This field is shared with the submission authors.')
  .form-group
    = f.label :is_highlight
    = f.check_box :is_highlight, class: 'switch-checkbox'
  .help-block This shows the event on the conference homepage.


- if @program.tracks.confirmed.cfp_active.any?
  .form-group
    = f.label :track_id, 'Track'
    = f.select :track_id, @program.tracks.confirmed.cfp_active.pluck(:name, :id), { include_blank: '(Please select)' }, { class: 'form-control' }
    - @program.tracks.confirmed.cfp_active.each do |track|
      .help-block.select-help-text.track-description.collapse{ id: "#{track.id}-help" }
        = track.description


- if @program.languages.present?
  .form-group
    = f.label :language
    = f.select :language, @program.languages_list, { include_blank: false}, { class: 'select-help-toggle form-control' }


- if @conference.program.difficulty_levels.any?
  .form-group
    = f.label :difficulty_level
    = f.select :difficulty_level_id, @conference.program.difficulty_levels.map{|level| [level.title, level.id ] }, {include_blank: false}, { class: 'select-help-toggle form-control' }
    - @conference.program.difficulty_levels.each do |difficulty_level|
      .help-block.select-help-text.collapse{ id: "#{difficulty_level.id}-help" }
        = difficulty_level.description

- if @event.committee_review.present?
  %br
  %strong.control-label Committee Feedback
  %small Use this feedback to improve your submission.
  .well= markdown(@event.committee_review)

= render 'proposals/submission_type_content_form', f: f, program: @program

- if  @program.cfp&.enable_registrations?
  %h4 Event Registration
  %hr
  .checkbox
    %label
      = f.check_box :require_registration
      Require participants to register to your event
  .form-group
    = f.number_field :max_attendees
    .help-block
      The maximum number of participants.
      = @event.room ? "Value must be between 1 and #{@event.room.size}" : 'Check room capacity after scheduling.'

.form-group
  = f.label :description, 'Requirements and Scheduling'
  %p Please include any scheduling constraints.
  = f.text_area :description, rows: 5, class: 'form-control'
  .help-block e.g. Are you only attending certain days?

%p.text-right
  - submit_copy = action_is_edit ? 'Update Proposal' : 'Create Proposal'
  = f.submit submit_copy, class: 'btn btn-success'

- content_for :script_head do
  :javascript
    /* Wait for the DOM to be ready before attaching events to the elements */
    $( document ).ready(function() {
        /* Set the minimum and maximum proposal abstract word length */
        function updateEventTypeRequirements() {
            var $selected = $("#event_event_type_id option:selected")
            var max = $selected.data("max-words");
            var min = $selected.data("min-words");

            // We replace the default text only if the current field is empty,
            // or is set to the default text of another event type.
            replace_defaut_submission_text(
                '#event_submission_text',
                $selected.data("instructions"),
                $("#event_event_type_id option").toArray().map(e => $(e).data('instructions'))
            );

            $("#abstract-maximum-word-count").text(max);
            $("#abstract-minimum-word-count").text(min);
            word_count($('#event_abstract').get(0), 'abstract-count', max);
        }
        $("#event_event_type_id").change(updateEventTypeRequirements);
        updateEventTypeRequirements();

        /* Count the proposal abstract length */
        $("#event_abstract").on('input', function() {
            var $selected = $("#event_event_type_id option:selected")
            var max = $selected.data("max-words");
            word_count(this, 'abstract-count', max);
        } );

        /* Count the submission text length */
        $("#event_submission_text").bind('change keyup paste input', function() {
            var $selected = $("event_event_type_id option:selected")
            var max = $selected.data("max-words");
            word_count(this, 'submission-count', max);
        });

        $('.js-resetSubmissionText').click((e) => {
          console.log('CLICKED')
          let $selected = $("#event_event_type_id option:selected");
          let $this = $(e.target);
          let affirm = confirm($this.data('confirm'));
          if (affirm) {
            let sub_text = $('#event_submission_text');
            sub_text.val($selected.data('instructions'));
            sub_text.trigger('change');
          }
        });
    });
