= form_for(@event_type, url: (@event_type.new_record? ? admin_conference_program_event_types_path : admin_conference_program_event_type_path(@conference.short_title, @event_type))) do |f|
  .form-group
    = f.label :title
    %abbr{title: 'This field is required'} *
    = f.text_field :title, autofocus: true, required: true, class: 'form-control'
  .form-group
    = f.label :length
    = f.number_field :length, size: 3, step: @event_type.program.schedule_interval, min: @event_type.program.schedule_interval, class: 'form-control'
    %span.help-block
      In steps of
      = @event_type.program.schedule_interval
      and minimum
      = @event_type.program.schedule_interval
  .form-group
    = f.label :description
    = f.text_area :description, class: 'form-control', rows: 5, data: { provide: 'markdown' }
    .help-block= markdown_hint
  .form-group
    = f.label "Allow public submission?", for: :enable_public_submission
    = f.check_box :enable_public_submission, class: 'switch-checkbox'
  .form-group
    = f.label :minimum_abstract_length
    (words)
    %abbr{title: 'This field is required'} *
    = f.number_field :minimum_abstract_length, size: 3, required: true, class: 'form-control'
  .form-group
    = f.label :maximum_abstract_length
    (words)
    %abbr{title: 'This field is required'} *
    = f.number_field :maximum_abstract_length, size: 3, required: true, class: 'form-control'
  .form-group
    = f.label :submission_template
    = f.text_area :submission_template, rows: 5, data: { provide: 'markdown' }
    .help-block= markdown_hint
  .form-group
    = f.label :color
    = f.color_field :color, class: 'form-control'
  %p.text-right
    = f.submit nil, class: 'btn btn-primary'
